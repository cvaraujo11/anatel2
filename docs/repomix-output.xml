This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
technical/
  03-pages/
    alimentacao.md
    autoconhecimento.md
    concursos-id.md
    concursos.md
    estudos-materiais.md
    estudos-simulado-personalizado.md
    estudos-simulado.md
    estudos.md
    financas.md
    hiperfocos.md
    inicio.md
    lazer.md
    perfil-ajuda.md
    perfil.md
    README.md
    receitas-adicionar.md
    receitas-editar-id.md
    receitas-id.md
    receitas-lista-compras.md
    receitas.md
    roadmap.md
    saude.md
    sono.md
  01-project-overview.md
  02-routing.md
  04-ui-components.md
  05-state-management.md
  06-libraries-services.md
  README.md
exemplo-receita-unica.json
exemplo-receitas-multiplas.json
guia-receitas.md
receita-plan.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="technical/03-pages/alimentacao.md">
# Documenta√ß√£o da P√°gina: Alimenta√ß√£o ([`app/alimentacao/page.tsx`](app/alimentacao/page.tsx:1))

## Prop√≥sito Geral da P√°gina

A p√°gina de Alimenta√ß√£o ([`app/alimentacao/page.tsx`](app/alimentacao/page.tsx:1)) centraliza as funcionalidades relacionadas ao gerenciamento da dieta e hidrata√ß√£o do usu√°rio. Ela permite o planejamento de refei√ß√µes, o registro do que foi consumido e o acompanhamento da ingest√£o de √°gua.

## Principais Funcionalidades

*   **Planejamento de Refei√ß√µes:** Os usu√°rios podem definir hor√°rios e descri√ß√µes para suas refei√ß√µes di√°rias (ex: caf√© da manh√£, almo√ßo, jantar).
*   **Registro de Refei√ß√µes Consumidas:** Permite que o usu√°rio registre as refei√ß√µes que efetivamente consumiu, incluindo hor√°rio, descri√ß√£o, um √≠cone representativo do tipo de alimento e, opcionalmente, uma foto da refei√ß√£o.
*   **Acompanhamento de Hidrata√ß√£o:** Os usu√°rios podem registrar a quantidade de copos de √°gua bebidos, ajustar uma meta di√°ria de consumo e visualizar seu progresso.
*   **Acesso √† Se√ß√£o de Receitas:** Fornece um atalho para a se√ß√£o "Minhas Receitas", onde o usu√°rio pode organizar suas receitas favoritas.

## Componentes Visuais Chave e Sua Fun√ß√£o

A p√°gina √© estruturada utilizando o componente [`Card`](app/components/ui/Card.tsx:1) para agrupar funcionalidades relacionadas:

1.  **`PlanejadorRefeicoes` ([`app/components/alimentacao/PlanejadorRefeicoes.tsx`](app/components/alimentacao/PlanejadorRefeicoes.tsx:13))**
    *   **Localiza√ß√£o:** Dentro de um [`Card`](app/components/ui/Card.tsx:1) com o t√≠tulo "Planejador de Refei√ß√µes".
    *   **Fun√ß√£o:** Exibe uma lista de refei√ß√µes planejadas (hor√°rio e descri√ß√£o). Permite ao usu√°rio adicionar novas refei√ß√µes, editar refei√ß√µes existentes (alterando hor√°rio e/ou descri√ß√£o) e remover refei√ß√µes do planejamento.

2.  **`RegistroRefeicoes` ([`app/components/alimentacao/RegistroRefeicoes.tsx`](app/components/alimentacao/RegistroRefeicoes.tsx:18))**
    *   **Localiza√ß√£o:** Dentro de um [`Card`](app/components/ui/Card.tsx:1) com o t√≠tulo "Registro de Refei√ß√µes".
    *   **Fun√ß√£o:** Mostra os registros de refei√ß√µes j√° feitos pelo usu√°rio. Permite adicionar um novo registro, especificando hor√°rio, descri√ß√£o, um √≠cone visual para o tipo de refei√ß√£o (ex: ‚òï para caf√©, üçé para fruta) e a op√ß√£o de anexar uma foto (simulada). Os registros existentes podem ser removidos.

3.  **`LembreteHidratacao` ([`app/components/alimentacao/LembreteHidratacao.tsx`](app/components/alimentacao/LembreteHidratacao.tsx:6))**
    *   **Localiza√ß√£o:** Dentro de um [`Card`](app/components/ui/Card.tsx:1) com o t√≠tulo "Hidrata√ß√£o".
    *   **Fun√ß√£o:** Apresenta o acompanhamento do consumo de √°gua. Exibe a quantidade de copos bebidos em rela√ß√£o a uma meta di√°ria ajust√°vel. O usu√°rio pode registrar ou remover copos de √°gua bebidos. Mostra o progresso visualmente atrav√©s de uma barra e √≠cones de gotas. Tamb√©m exibe o hor√°rio do √∫ltimo copo registrado e dicas de hidrata√ß√£o.

4.  **Card "Minhas Receitas"**
    *   **Localiza√ß√£o:** √â um [`Card`](app/components/ui/Card.tsx:1) com o t√≠tulo "Minhas Receitas".
    *   **Fun√ß√£o:** Cont√©m um texto introdut√≥rio que incentiva o usu√°rio a organizar e acessar suas receitas. Possui um bot√£o ([`Button`](app/components/ui/Button.tsx:1) estilizado dentro de um componente [`Link`](app/alimentacao/page.tsx:7) do Next.js) "Acessar Minhas Receitas" que redireciona o usu√°rio para a p√°gina [`/receitas`](app/receitas/page.tsx:1).

## Conte√∫do Textual Est√°tico Proeminente

*   **T√≠tulo Principal da P√°gina:** "Alimenta√ß√£o" (tag `<h1>`).
*   **T√≠tulos dos Cards:**
    *   "Planejador de Refei√ß√µes"
    *   "Registro de Refei√ß√µes"
    *   "Hidrata√ß√£o"
    *   "Minhas Receitas"
*   **Texto Introdut√≥rio no Card "Minhas Receitas":** "Organize e acesse suas receitas favoritas aqui. Crie listas de compras e planeje suas refei√ß√µes."

## Intera√ß√µes com Stores de Estado (Zustand)

A p√°gina [`app/alimentacao/page.tsx`](app/alimentacao/page.tsx:1), atrav√©s de seus componentes filhos, interage intensamente com a store [`useAlimentacaoStore`](app/stores/alimentacaoStore.ts:41) (localizada em [`app/stores/alimentacaoStore.ts`](app/stores/alimentacaoStore.ts:1)).

*   **Store Utilizada:** [`useAlimentacaoStore`](app/stores/alimentacaoStore.ts:41)
*   **Prop√≥sito da Intera√ß√£o:**
    *   O componente [`PlanejadorRefeicoes`](app/components/alimentacao/PlanejadorRefeicoes.tsx:13) utiliza a store para:
        *   Ler a lista de `refeicoes` planejadas.
        *   Chamar `adicionarRefeicao` para criar novas refei√ß√µes.
        *   Chamar `atualizarRefeicao` para modificar refei√ß√µes existentes.
        *   Chamar `removerRefeicao` para excluir refei√ß√µes.
    *   O componente [`RegistroRefeicoes`](app/components/alimentacao/RegistroRefeicoes.tsx:18) utiliza a store para:
        *   Ler a lista de `registros` de refei√ß√µes consumidas.
        *   Chamar `adicionarRegistro` para salvar um novo registro de refei√ß√£o.
        *   Chamar `removerRegistro` para excluir um registro.
    *   O componente [`LembreteHidratacao`](app/components/alimentacao/LembreteHidratacao.tsx:6) utiliza a store para:
        *   Ler o estado de `coposBebidos`, `metaDiaria` e `ultimoRegistro` de hidrata√ß√£o.
        *   Chamar `adicionarCopo` para incrementar o n√∫mero de copos bebidos.
        *   Chamar `removerCopo` para decrementar o n√∫mero de copos bebidos.
        *   Chamar `ajustarMeta` para modificar a meta di√°ria de copos de √°gua.

A store [`useAlimentacaoStore`](app/stores/alimentacaoStore.ts:41) tamb√©m utiliza o middleware `persist` do Zustand para salvar o estado relacionado √† alimenta√ß√£o no `localStorage` do navegador sob a chave `alimentacao-storage`, garantindo que os dados do usu√°rio persistam entre as sess√µes.
</file>

<file path="technical/03-pages/autoconhecimento.md">
# Documenta√ß√£o da P√°gina: Autoconhecimento ([`app/autoconhecimento/page.tsx`](app/autoconhecimento/page.tsx:1))

## Prop√≥sito Geral da P√°gina

A p√°gina de Autoconhecimento serve como um di√°rio digital estruturado, permitindo ao usu√°rio registrar, organizar e refletir sobre diferentes aspectos de sua personalidade, motiva√ß√µes e padr√µes de comportamento. O objetivo √© facilitar o autoconhecimento atrav√©s da documenta√ß√£o e revis√£o de notas pessoais em se√ß√µes tem√°ticas. A p√°gina tamb√©m oferece um "Modo Ref√∫gio" para uma experi√™ncia de escrita focada e com menos distra√ß√µes.

## Principais Funcionalidades

*   **Navega√ß√£o por Abas Tem√°ticas:** O usu√°rio pode alternar entre tr√™s se√ß√µes principais para organizar suas notas:
    *   "Quem sou"
    *   "Meus porqu√™s"
    *   "Meus padr√µes"
*   **Cria√ß√£o e Edi√ß√£o de Notas:** Permite criar novas notas ou editar notas existentes dentro da se√ß√£o selecionada.
*   **Listagem de Notas:** Exibe uma lista das notas previamente salvas para a aba ativa, permitindo f√°cil acesso e sele√ß√£o.
*   **Modo Ref√∫gio:** Uma funcionalidade que simplifica a interface, possivelmente ocultando elementos visuais secund√°rios para promover foco durante a escrita ou leitura.
*   **Gerenciamento de Estado de Edi√ß√£o:** Controla se o usu√°rio est√° criando uma nova nota, editando uma existente ou visualizando a lista de notas.

## Componentes Visuais Chave e Sua Fun√ß√£o

*   **Abas de Navega√ß√£o (Din√¢micas):**
    *   Localiza√ß√£o: Topo da p√°gina, abaixo do t√≠tulo principal ([`app/autoconhecimento/page.tsx:70-89`](app/autoconhecimento/page.tsx:70)).
    *   Fun√ß√£o: Permitem ao usu√°rio selecionar qual categoria de notas de autoconhecimento deseja visualizar ou editar ("Quem sou", "Meus porqu√™s", "Meus padr√µes").
*   **[`ListaNotas`](app/components/autoconhecimento/ListaNotas.tsx:6) ([`app/components/autoconhecimento/ListaNotas.tsx`](app/components/autoconhecimento/ListaNotas.tsx:1)):**
    *   Localiza√ß√£o: Na coluna da esquerda (em telas maiores) quando nenhuma nota est√° selecionada para edi√ß√£o ou cria√ß√£o ([`app/autoconhecimento/page.tsx:124-127`](app/autoconhecimento/page.tsx:124)).
    *   Fun√ß√£o: Exibe os t√≠tulos ou resumos das notas existentes para a aba selecionada. Clicar em uma nota da lista a seleciona para visualiza√ß√£o/edi√ß√£o no [`EditorNotas`](app/components/autoconhecimento/EditorNotas.tsx:5).
*   **[`EditorNotas`](app/components/autoconhecimento/EditorNotas.tsx:5) ([`app/components/autoconhecimento/EditorNotas.tsx`](app/components/autoconhecimento/EditorNotas.tsx:1)):**
    *   Localiza√ß√£o: Ocupa a √°rea principal (ou coluna da direita em telas maiores) quando uma nota est√° sendo criada ou editada ([`app/autoconhecimento/page.tsx:148-152`](app/autoconhecimento/page.tsx:148)).
    *   Fun√ß√£o: Prov√™ uma interface rica (provavelmente um editor de texto) para o usu√°rio escrever e formatar o conte√∫do de suas notas. Salva as altera√ß√µes ou a nova nota.
*   **[`ModoRefugio`](app/components/autoconhecimento/ModoRefugio.tsx:7) ([`app/components/autoconhecimento/ModoRefugio.tsx`](app/components/autoconhecimento/ModoRefugio.tsx:1)):**
    *   Localiza√ß√£o: Renderizado no final do container da p√°gina, possivelmente como um bot√£o flutuante ou um toggle ([`app/autoconhecimento/page.tsx:159`](app/autoconhecimento/page.tsx:159)).
    *   Fun√ß√£o: Ativa ou desativa o "Modo Ref√∫gio". Quando ativo, a interface √© simplificada (e.g., descri√ß√µes de se√ß√£o e o bot√£o "Nova nota" podem ser ocultados).
*   **[`Button`](app/components/ui/Button.tsx:8) ([`app/components/ui/Button.tsx`](app/components/ui/Button.tsx:1)):**
    *   Fun√ß√£o: Utilizado para diversas a√ß√µes:
        *   "Nova nota": Inicia o processo de cria√ß√£o de uma nova nota ([`app/autoconhecimento/page.tsx:113-120`](app/autoconhecimento/page.tsx:113)).
        *   "Cancelar": Descarta a cria√ß√£o ou edi√ß√£o de uma nota, retornando √† visualiza√ß√£o da lista ([`app/autoconhecimento/page.tsx:138-145`](app/autoconhecimento/page.tsx:138)).
*   **[`Container`](app/components/ui/Container.tsx:9) ([`app/components/ui/Container.tsx`](app/components/ui/Container.tsx:1)):**
    *   Fun√ß√£o: Componente de layout que envolve todo o conte√∫do da p√°gina, garantindo consist√™ncia visual e espa√ßamento.
*   **[`Section`](app/components/ui/Section.tsx:10) ([`app/components/ui/Section.tsx`](app/components/ui/Section.tsx:1)):**
    *   Fun√ß√£o: Agrupa o conte√∫do principal relacionado √† aba selecionada, contendo a [`ListaNotas`](app/components/autoconhecimento/ListaNotas.tsx:6) e/ou o [`EditorNotas`](app/components/autoconhecimento/EditorNotas.tsx:5) ([`app/autoconhecimento/page.tsx:100-156`](app/autoconhecimento/page.tsx:100)).

## Conte√∫do Textual Est√°tico Proeminente

*   **T√≠tulo Principal da P√°gina:** "Notas de Autoconhecimento" ([`app/autoconhecimento/page.tsx:66`](app/autoconhecimento/page.tsx:66)).
*   **T√≠tulos das Abas/Se√ß√µes (vis√≠veis nas abas e como cabe√ßalhos de se√ß√£o):**
    *   "Quem sou" ([`app/autoconhecimento/page.tsx:22`](app/autoconhecimento/page.tsx:22))
    *   "Meus porqu√™s" ([`app/autoconhecimento/page.tsx:23`](app/autoconhecimento/page.tsx:23))
    *   "Meus padr√µes" ([`app/autoconhecimento/page.tsx:24`](app/autoconhecimento/page.tsx:24))
*   **Descri√ß√µes das Se√ß√µes (exibidas abaixo das abas quando nenhuma nota est√° sendo editada e o Modo Ref√∫gio est√° desativado):**
    *   Para "Quem sou": "Registre suas prefer√™ncias, avers√µes e caracter√≠sticas pessoais est√°veis" ([`app/autoconhecimento/page.tsx:29`](app/autoconhecimento/page.tsx:29)).
    *   Para "Meus porqu√™s": "Documente motiva√ß√µes e valores fundamentais que guiam suas decis√µes" ([`app/autoconhecimento/page.tsx:30`](app/autoconhecimento/page.tsx:30)).
    *   Para "Meus padr√µes": "Anote rea√ß√µes emocionais t√≠picas e estrat√©gias eficazes em momentos de crise" ([`app/autoconhecimento/page.tsx:31`](app/autoconhecimento/page.tsx:31)).
*   **Cabe√ßalhos Din√¢micos:**
    *   "Suas notas em [Nome da Aba]" (e.g., "Suas notas em Quem sou") ([`app/autoconhecimento/page.tsx:109`](app/autoconhecimento/page.tsx:109)).
    *   "Nova nota" ou "Editar nota", dependendo da a√ß√£o do usu√°rio ([`app/autoconhecimento/page.tsx:135`](app/autoconhecimento/page.tsx:135)).

## Intera√ß√µes com Stores de Estado (Zustand)

*   A p√°gina interage com a store `useAutoconhecimentoStore` (importada de [`app/stores/autoconhecimentoStore.ts`](app/stores/autoconhecimentoStore.ts:11)).
*   **Estado Utilizado:** `modoRefugio` ([`app/autoconhecimento/page.tsx:18`](app/autoconhecimento/page.tsx:18)).
*   **Prop√≥sito da Intera√ß√£o:** O estado `modoRefugio` √© lido da store para determinar se a interface da p√°gina deve ser simplificada. Se `modoRefugio` for `true`, certos elementos da interface, como as descri√ß√µes das se√ß√µes ([`app/autoconhecimento/page.tsx:92`](app/autoconhecimento/page.tsx:92)) e o bot√£o para criar uma nova nota ([`app/autoconhecimento/page.tsx:112`](app/autoconhecimento/page.tsx:112)), s√£o ocultados para minimizar distra√ß√µes. O componente [`ModoRefugio`](app/components/autoconhecimento/ModoRefugio.tsx:7) √© respons√°vel por permitir ao usu√°rio alterar este estado na store.
</file>

<file path="technical/03-pages/concursos-id.md">
# Documenta√ß√£o da P√°gina: Detalhes do Concurso ([`app/concursos/[id]/page.tsx`](app/concursos/[id]/page.tsx:1))

Este documento detalha a p√°gina que exibe os detalhes de um concurso espec√≠fico na aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.5: Documenta√ß√£o da p√°gina [`app/concursos/[id]/page.tsx`](app/concursos/[id]/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/concursos.md">
# Documenta√ß√£o da P√°gina: Concursos ([`app/concursos/page.tsx`](app/concursos/page.tsx:1))

Este documento detalha a p√°gina de listagem de concursos da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.4: Documenta√ß√£o da p√°gina [`app/concursos/page.tsx`](app/concursos/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/estudos-materiais.md">
# Documenta√ß√£o da P√°gina: Materiais de Estudo ([`app/estudos/materiais/page.tsx`](app/estudos/materiais/page.tsx:1))

Este documento detalha a p√°gina de materiais de estudo da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.7: Documenta√ß√£o da p√°gina [`app/estudos/materiais/page.tsx`](app/estudos/materiais/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/estudos-simulado-personalizado.md">
# Documenta√ß√£o da P√°gina: Simulado Personalizado ([`app/estudos/simulado-personalizado/page.tsx`](app/estudos/simulado-personalizado/page.tsx:1))

Este documento detalha a p√°gina de cria√ß√£o de simulados personalizados da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.9: Documenta√ß√£o da p√°gina [`app/estudos/simulado-personalizado/page.tsx`](app/estudos/simulado-personalizado/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/estudos-simulado.md">
# Documenta√ß√£o da P√°gina: Simulado ([`app/estudos/simulado/page.tsx`](app/estudos/simulado/page.tsx:1))

Este documento detalha a p√°gina de simulados da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.8: Documenta√ß√£o da p√°gina [`app/estudos/simulado/page.tsx`](app/estudos/simulado/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/estudos.md">
qq# Documenta√ß√£o da P√°gina: Estudos ([`app/estudos/page.tsx`](app/estudos/page.tsx:1))

Este documento detalha a p√°gina principal de estudos da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.6: Documenta√ß√£o da p√°gina [`app/estudos/page.tsx`](app/estudos/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/financas.md">
# Documenta√ß√£o da P√°gina: Finan√ßas ([`app/financas/page.tsx`](app/financas/page.tsx:1))

Este documento detalha a p√°gina de finan√ßas da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.10: Documenta√ß√£o da p√°gina [`app/financas/page.tsx`](app/financas/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/hiperfocos.md">
# Documenta√ß√£o da P√°gina: Hiperfocos ([`app/hiperfocos/page.tsx`](app/hiperfocos/page.tsx:1))

Este documento detalha a p√°gina de hiperfocos da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.11: Documenta√ß√£o da p√°gina [`app/hiperfocos/page.tsx`](app/hiperfocos/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/inicio.md">
# Documenta√ß√£o da P√°gina Inicial ([`app/page.tsx`](app/page.tsx:1))

## Prop√≥sito Geral da P√°gina

A p√°gina inicial ([`app/page.tsx`](app/page.tsx:1)) serve como um painel de controle central para o usu√°rio, fornecendo uma vis√£o geral de suas atividades, prioridades, compromissos e configura√ß√µes relevantes para o dia. Seu objetivo √© oferecer acesso r√°pido √†s informa√ß√µes e funcionalidades mais importantes do aplicativo.

## Principais Funcionalidades

*   **Visualiza√ß√£o do Painel do Dia:** Exibe os blocos de tempo e atividades planejadas para o dia.
*   **Gerenciamento de Prioridades:** Mostra a lista de tarefas priorit√°rias para o dia e permite o acompanhamento do status (pendentes/conclu√≠das).
*   **Checklist de Medicamentos:** Apresenta um checklist para o usu√°rio marcar os medicamentos que j√° tomou.
*   **Lembretes de Pausas:** Caso ativado nas configura√ß√µes, exibe lembretes para pausas.
*   **Visualiza√ß√£o da Pr√≥xima Prova:** Mostra informa√ß√µes sobre a pr√≥xima prova agendada.
*   **Resumo R√°pido:** Apresenta um sum√°rio com o n√∫mero de prioridades pendentes, prioridades conclu√≠das e pr√≥ximos compromissos.
*   **Acesso R√°pido:** Fornece links diretos para se√ß√µes importantes do aplicativo como Estudos, Sa√∫de, Hiperfocos e Lazer.
*   **Prefer√™ncias de Acessibilidade:** Permite ao usu√°rio ajustar prefer√™ncias visuais como texto grande, alto contraste e redu√ß√£o de est√≠mulos atrav√©s do bot√£o de prefer√™ncias.

## Componentes Visuais Chave e Sua Fun√ß√£o

A p√°gina utiliza diversos componentes, principalmente das pastas [`app/components/ui/`](app/components/ui/) para elementos de interface gen√©ricos e [`app/components/inicio/`](app/components/inicio/) para componentes espec√≠ficos da p√°gina inicial.

*   **Componentes de UI (de [`app/components/ui/`](app/components/ui/)):**
    *   [`DashboardCard`](app/components/ui/DashboardCard.tsx:6): Cont√™iner padr√£o para se√ß√µes do dashboard, com t√≠tulo e op√ß√£o de estado de carregamento. Usado para envolver o `PainelDia`, `ListaPrioridades`, etc.
    *   [`DashboardSection`](app/components/ui/DashboardSection.tsx:7): Define uma se√ß√£o dentro do dashboard, agrupando cart√µes ou outros elementos.
    *   [`DashboardHeader`](app/components/ui/DashboardHeader.tsx:8): Cabe√ßalho da p√°gina do dashboard, exibindo t√≠tulo, nome do usu√°rio, descri√ß√£o e a√ß√µes (como o bot√£o de prefer√™ncias).
    *   [`DashboardSummary`](app/components/ui/DashboardSummary.tsx:9): Exibe um resumo de estat√≠sticas chave (prioridades pendentes/conclu√≠das, pr√≥ximos compromissos).
    *   [`SuspenseWrapper`](app/components/ui/SuspenseWrapper.tsx:10): Envolve componentes que podem ter carregamento ass√≠ncrono, exibindo um placeholder enquanto o conte√∫do n√£o est√° pronto.
    *   [`PreferencesButton`](app/components/ui/PreferencesButton.tsx:11): Bot√£o que provavelmente abre um modal ou menu para o usu√°rio configurar suas prefer√™ncias visuais.
    *   [`Button`](app/components/ui/Button.tsx:12): Componente de bot√£o gen√©rico.
    *   [`cn`](app/lib/utils.ts:19): Utilit√°rio para concatenar classes CSS condicionalmente (usado com `buttonVariants`).

*   **Componentes da P√°gina Inicial (de [`app/components/inicio/`](app/components/inicio/)):**
    *   [`PainelDia`](app/components/inicio/PainelDia.tsx:13): Exibe uma visualiza√ß√£o dos blocos de tempo e atividades agendadas para o dia corrente.
    *   [`ListaPrioridades`](app/components/inicio/ListaPrioridades.tsx:14): Mostra a lista de tarefas definidas como priorit√°rias para o dia.
    *   [`LembretePausas`](app/components/inicio/LembretePausas.tsx:15): Apresenta um lembrete visual para o usu√°rio fazer pausas, provavelmente baseado nas configura√ß√µes de metas de pausas.
    *   [`ChecklistMedicamentos`](app/components/inicio/ChecklistMedicamentos.tsx:16): Permite ao usu√°rio marcar os medicamentos que j√° foram administrados no dia.
    *   [`ProximaProvaCard`](app/components/inicio/ProximaProvaCard.tsx:17): Exibe informa√ß√µes sobre a pr√≥xima prova ou avalia√ß√£o importante agendada.

## Conte√∫do Textual Est√°tico Proeminente

*   **T√≠tulo Principal (via [`DashboardHeader`](app/components/ui/DashboardHeader.tsx:89)):** "In√≠cio"
*   **Descri√ß√£o (via [`DashboardHeader`](app/components/ui/DashboardHeader.tsx:92)):** "Aqui est√° seu progresso e tarefas para hoje."
*   **T√≠tulos de Se√ß√£o (via [`DashboardCard`](app/components/ui/DashboardCard.tsx:6) e [`DashboardSection`](app/components/ui/DashboardSection.tsx:7)):**
    *   "Painel do Dia"
    *   "Prioridades do Dia"
    *   "Acesso R√°pido"
*   **Links de Acesso R√°pido:**
    *   "Estudos" (com subt√≠tulo "Materiais e T√©cnicas")
    *   "Sa√∫de" (com subt√≠tulo "Medicamentos e Bem-estar")
    *   "Hiperfocos" (com subt√≠tulo "Projetos e Interesses")
    *   "Lazer" (com subt√≠tulo "Atividades e Descanso")

## Intera√ß√µes com Stores de Estado (Zustand)

A p√°gina [`app/page.tsx`](app/page.tsx:1) obt√©m a maior parte de seus dados din√¢micos atrav√©s do hook personalizado [`useDashboard`](app/hooks/useDashboard.ts:18). Este hook, por sua vez, interage com as seguintes stores Zustand localizadas em [`app/stores/`](app/stores/):

*   **[`usePainelDiaStore`](app/stores/painelDiaStore.ts:4) (via [`app/hooks/useDashboard.ts:50`](app/hooks/useDashboard.ts:50)):**
    *   Utilizada para buscar os `blocos` de tempo agendados para o dia, que s√£o exibidos no componente [`PainelDia`](app/components/inicio/PainelDia.tsx:13).
*   **[`usePrioridadesStore`](app/stores/prioridadesStore.ts:5) (via [`app/hooks/useDashboard.ts:51`](app/hooks/useDashboard.ts:51)):**
    *   Utilizada para buscar as `prioridades` do dia atrav√©s da fun√ß√£o `getHistoricoPorData`. Essas prioridades s√£o exibidas no componente [`ListaPrioridades`](app/components/inicio/ListaPrioridades.tsx:14) e usadas para calcular as estat√≠sticas de prioridades pendentes e conclu√≠das no [`DashboardSummary`](app/components/ui/DashboardSummary.tsx:9).
*   **[`usePerfilStore`](app/stores/perfilStore.ts:6) (via [`app/hooks/useDashboard.ts:52`](app/hooks/useDashboard.ts:52)):**
    *   Utilizada para obter:
        *   `nome`: Nome do usu√°rio, exibido no [`DashboardHeader`](app/components/ui/DashboardHeader.tsx:91).
        *   `metasDiarias`: Cont√©m informa√ß√µes sobre `pausasProgramadas` e `tarefasPrioritarias`, usadas para configurar o comportamento do [`LembretePausas`](app/components/inicio/LembretePausas.tsx:15) e potencialmente para a l√≥gica de exibi√ß√£o de prioridades.
        *   `pausasAtivas`: Um booleano que determina se os lembretes de pausa devem ser mostrados ([`LembretePausas`](app/components/inicio/LembretePausas.tsx:144)).
        *   `preferenciasVisuais`: Objeto contendo as configura√ß√µes de acessibilidade (`altoContraste`, `reducaoEstimulos`, `textoGrande`) que s√£o aplicadas dinamicamente ao `document.documentElement` no [`useEffect`](app/page.tsx:62) da p√°gina para alterar a apar√™ncia global da interface.

Os componentes [`ChecklistMedicamentos`](app/components/inicio/ChecklistMedicamentos.tsx:16) e [`ProximaProvaCard`](app/components/inicio/ProximaProvaCard.tsx:17) provavelmente interagem com suas pr√≥prias stores ou com stores mais espec√≠ficas (ex: `useSaudeStore`, `useConcursosStore`), embora a intera√ß√£o direta n√£o seja vis√≠vel no c√≥digo de [`app/page.tsx`](app/page.tsx:1) ou [`app/hooks/useDashboard.ts`](app/hooks/useDashboard.ts:1) e sim encapsulada dentro desses pr√≥prios componentes.
</file>

<file path="technical/03-pages/lazer.md">
# Documenta√ß√£o da P√°gina: Lazer ([`app/lazer/page.tsx`](app/lazer/page.tsx:1))

Este documento detalha a p√°gina de lazer da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.12: Documenta√ß√£o da p√°gina [`app/lazer/page.tsx`](app/lazer/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/perfil-ajuda.md">
# Documenta√ß√£o da P√°gina: Ajuda do Perfil ([`app/perfil/ajuda/page.tsx`](app/perfil/ajuda/page.tsx:1))

Este documento detalha a p√°gina de ajuda dentro da se√ß√£o de perfil do usu√°rio da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.14: Documenta√ß√£o da p√°gina [`app/perfil/ajuda/page.tsx`](app/perfil/ajuda/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/perfil.md">
# Documenta√ß√£o da P√°gina: Perfil ([`app/perfil/page.tsx`](app/perfil/page.tsx:1))

Este documento detalha a p√°gina de perfil do usu√°rio da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.13: Documenta√ß√£o da p√°gina [`app/perfil/page.tsx`](app/perfil/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/README.md">
# Documenta√ß√£o das P√°ginas da Aplica√ß√£o

Esta se√ß√£o cont√©m a documenta√ß√£o detalhada para cada p√°gina principal (`page.tsx`) da aplica√ß√£o StayFocus. Cada arquivo markdown abaixo descreve o prop√≥sito, funcionalidades, componentes visuais chave, conte√∫do textual est√°tico e intera√ß√µes com o estado global (Zustand) da respectiva p√°gina.

## √çndice de P√°ginas

*   [P√°gina Inicial (`/`)](./inicio.md)
*   [Alimenta√ß√£o (`/alimentacao`)](./alimentacao.md)
*   [Autoconhecimento (`/autoconhecimento`)](./autoconhecimento.md)
*   [Concursos (`/concursos`)](./concursos.md)
*   [Detalhes do Concurso (`/concursos/[id]`)](./concursos-id.md)
*   [Estudos (`/estudos`)](./estudos.md)
*   [Materiais de Estudo (`/estudos/materiais`)](./estudos-materiais.md)
*   [Simulado (`/estudos/simulado`)](./estudos-simulado.md)
*   [Simulado Personalizado (`/estudos/simulado-personalizado`)](./estudos-simulado-personalizado.md)
*   [Finan√ßas (`/financas`)](./financas.md)
*   [Hiperfocos (`/hiperfocos`)](./hiperfocos.md)
*   [Lazer (`/lazer`)](./lazer.md)
*   [Perfil (`/perfil`)](./perfil.md)
*   [Ajuda do Perfil (`/perfil/ajuda`)](./perfil-ajuda.md)
*   [Receitas (`/receitas`)](./receitas.md)
*   [Detalhes da Receita (`/receitas/[id]`)](./receitas-id.md)
*   [Adicionar Receita (`/receitas/adicionar`)](./receitas-adicionar.md)
*   [Editar Receita (`/receitas/editar/[id]`)](./receitas-editar-id.md)
*   [Lista de Compras (`/receitas/lista-compras`)](./receitas-lista-compras.md)
*   [Roadmap (`/roadmap`)](./roadmap.md)
*   [Sa√∫de (`/saude`)](./saude.md)
*   [Sono (`/sono`)](./sono.md)
</file>

<file path="technical/03-pages/receitas-adicionar.md">
# Documenta√ß√£o da P√°gina: Adicionar Receita ([`app/receitas/adicionar/page.tsx`](app/receitas/adicionar/page.tsx:1))

Este documento detalha a p√°gina utilizada para adicionar novas receitas √† aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.17: Documenta√ß√£o da p√°gina [`app/receitas/adicionar/page.tsx`](app/receitas/adicionar/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/receitas-editar-id.md">
# Documenta√ß√£o da P√°gina: Editar Receita ([`app/receitas/editar/[id]/page.tsx`](app/receitas/editar/[id]/page.tsx:1))

Este documento detalha a p√°gina utilizada para editar receitas existentes na aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.18: Documenta√ß√£o da p√°gina [`app/receitas/editar/[id]/page.tsx`](app/receitas/editar/[id]/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/receitas-id.md">
# Documenta√ß√£o da P√°gina: Detalhes da Receita ([`app/receitas/[id]/page.tsx`](app/receitas/[id]/page.tsx:1))

Este documento detalha a p√°gina que exibe os detalhes de uma receita espec√≠fica na aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.16: Documenta√ß√£o da p√°gina [`app/receitas/[id]/page.tsx`](app/receitas/[id]/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/receitas-lista-compras.md">
# Documenta√ß√£o da P√°gina: Lista de Compras ([`app/receitas/lista-compras/page.tsx`](app/receitas/lista-compras/page.tsx:1))

Este documento detalha a p√°gina de lista de compras da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.19: Documenta√ß√£o da p√°gina [`app/receitas/lista-compras/page.tsx`](app/receitas/lista-compras/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/receitas.md">
# Documenta√ß√£o da P√°gina: Receitas ([`app/receitas/page.tsx`](app/receitas/page.tsx:1))

Este documento detalha a p√°gina de listagem de receitas da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.15: Documenta√ß√£o da p√°gina [`app/receitas/page.tsx`](app/receitas/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/roadmap.md">
# Documenta√ß√£o da P√°gina: Roadmap ([`app/roadmap/page.tsx`](app/roadmap/page.tsx:1))

Este documento detalha a p√°gina de roadmap da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.20: Documenta√ß√£o da p√°gina [`app/roadmap/page.tsx`](app/roadmap/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/saude.md">
# Documenta√ß√£o da P√°gina: Sa√∫de ([`app/saude/page.tsx`](app/saude/page.tsx:1))

Este documento detalha a p√°gina de sa√∫de da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.21: Documenta√ß√£o da p√°gina [`app/saude/page.tsx`](app/saude/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/03-pages/sono.md">
# Documenta√ß√£o da P√°gina: Sono ([`app/sono/page.tsx`](app/sono/page.tsx:1))

Este documento detalha a p√°gina de sono da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 3.22: Documenta√ß√£o da p√°gina [`app/sono/page.tsx`](app/sono/page.tsx:1) ser√° inserido aqui.)*
</file>

<file path="technical/01-project-overview.md">
# Resumo da An√°lise do Projeto Anatel2

## Estrutura Geral de Diret√≥rios

O projeto utiliza a estrutura do App Router do Next.js. As principais pastas identificadas s√£o:

*   **`app/`**: Cont√©m a l√≥gica central da aplica√ß√£o, incluindo:
    *   P√°ginas (rotas) da aplica√ß√£o (ex: [`app/page.tsx`](app/page.tsx:1), [`app/alimentacao/page.tsx`](app/alimentacao/page.tsx:1)).
    *   Layouts globais e espec√≠ficos (ex: [`app/layout.tsx`](app/layout.tsx:1)).
    *   **`app/components/`**: Abriga os componentes React reutiliz√°veis, frequentemente organizados por funcionalidade (ex: [`app/components/alimentacao/`](app/components/alimentacao), [`app/components/ui/`](app/components/ui)).
    *   **`app/lib/`**: M√≥dulos contendo l√≥gica de neg√≥cios, servi√ßos, utilit√°rios e clientes de API (ex: [`app/lib/dataService.ts`](app/lib/dataService.ts:1), [`app/lib/googleDriveClient.ts`](app/lib/googleDriveClient.ts:1)).
    *   **`app/stores/`**: Cont√©m as lojas (stores) do Zustand para gerenciamento de estado global, segmentadas por dom√≠nio da aplica√ß√£o (ex: [`app/stores/alimentacaoStore.ts`](app/stores/alimentacaoStore.ts:1), [`app/stores/concursosStore.ts`](app/stores/concursosStore.ts:1)).
*   **`pages/`**: Principalmente utilizado para as API Routes do Next.js (ex: [`pages/api/gerar-questao.ts`](pages/api/gerar-questao.ts:1), [`pages/api/drive/`](pages/api/drive)).
*   **`public/`**: Armazena arquivos est√°ticos que s√£o servidos diretamente, como imagens (ex: [`public/images/logo.svg`](public/images/logo.svg)), fontes, arquivos JSON de exemplo (ex: [`public/simulado-exemplo.json`](public/simulado-exemplo.json)) e sons.
*   **`docs/`**: Cont√©m arquivos de documenta√ß√£o do projeto, como guias e exemplos em Markdown e JSON.
*   **`perplexity-mcp-server/`**: Um diret√≥rio separado que parece conter um servidor MCP (Model Context Protocol), possivelmente para interagir com a API da Perplexity.

## Principais Tecnologias, Frameworks e Bibliotecas

*   **Next.js ([`package.json#L23`](package.json:23))**: Framework React para desenvolvimento de aplica√ß√µes web full-stack, utilizado para renderiza√ß√£o no servidor (SSR), gera√ß√£o de sites est√°ticos (SSG), roteamento (App Router) e API routes.
*   **React ([`package.json#L26`](package.json:26))**: Biblioteca JavaScript para constru√ß√£o de interfaces de usu√°rio interativas e componentizadas.
*   **TypeScript ([`package.json#L45`](package.json:45))**: Superset do JavaScript que adiciona tipagem est√°tica, melhorando a robustez e a manutenibilidade do c√≥digo. Configurado atrav√©s do [`tsconfig.json`](tsconfig.json:1).
*   **Tailwind CSS ([`package.json#L44`](package.json:44))**: Framework CSS utility-first para estiliza√ß√£o r√°pida e customiz√°vel. Configurado em [`tailwind.config.js`](tailwind.config.js:1) com um tema customizado e cores espec√≠ficas para diferentes se√ß√µes da aplica√ß√£o.
*   **Zustand ([`package.json#L32`](package.json:32))**: Biblioteca para gerenciamento de estado global de forma simples e flex√≠vel, utilizada nas stores dentro de [`app/stores/`](app/stores).
*   **Lucide React ([`package.json#L22`](package.json:22))**: Biblioteca de √≠cones SVG leves e customiz√°veis.
*   **date-fns ([`package.json#L19`](package.json:19))**: Biblioteca para manipula√ß√£o de datas e hor√°rios.
*   **Google APIs (googleapis [`package.json#L20`](package.json:20))**: Biblioteca cliente para interagir com APIs do Google, provavelmente utilizada para integra√ß√£o com o Google Drive, como sugerido pela presen√ßa de [`app/lib/googleDriveClient.ts`](app/lib/googleDriveClient.ts:1) e rotas em [`pages/api/drive/`](pages/api/drive).
*   **Iron Session ([`package.json#L21`](package.json:21))**: Biblioteca para gerenciamento de sess√µes stateless, √∫til para autentica√ß√£o.
*   **Recharts ([`package.json#L29`](package.json:29))**: Biblioteca para cria√ß√£o de gr√°ficos e visualiza√ß√µes de dados.
*   **React Markdown ([`package.json#L28`](package.json:28))**: Componente React para renderizar conte√∫do Markdown.
*   **Next Themes ([`package.json#L24`](package.json:24))**: Facilita a implementa√ß√£o de temas (ex: dark/light mode) em aplica√ß√µes Next.js.
*   **ESLint ([`package.json#L40`](package.json:40)) / Prettier ([`package.json#L43`](package.json:43))**: Ferramentas para linting e formata√ß√£o de c√≥digo, garantindo consist√™ncia e qualidade.
*   **@next/bundle-analyzer ([`package.json#L35`](package.json:35))**: Ferramenta para analisar o tamanho dos bundles gerados pela aplica√ß√£o Next.js, configurada em [`next.config.js`](next.config.js:1).
</file>

<file path="technical/02-routing.md">
# Mapeamento de P√°ginas e Rotas

Esta se√ß√£o detalha as principais rotas da aplica√ß√£o e os arquivos `page.tsx` correspondentes que as definem, com base na estrutura do App Router do Next.js.

*   `/`: [`app/page.tsx`](app/page.tsx:1)
*   `/alimentacao`: [`app/alimentacao/page.tsx`](app/alimentacao/page.tsx:1)
*   `/autoconhecimento`: [`app/autoconhecimento/page.tsx`](app/autoconhecimento/page.tsx:1)
*   `/concursos`: [`app/concursos/page.tsx`](app/concursos/page.tsx:1)
*   `/concursos/[id]`: [`app/concursos/[id]/page.tsx`](app/concursos/[id]/page.tsx:1)
*   `/estudos`: [`app/estudos/page.tsx`](app/estudos/page.tsx:1)
*   `/estudos/materiais`: [`app/estudos/materiais/page.tsx`](app/estudos/materiais/page.tsx:1)
*   `/estudos/simulado`: [`app/estudos/simulado/page.tsx`](app/estudos/simulado/page.tsx:1)
*   `/estudos/simulado-personalizado`: [`app/estudos/simulado-personalizado/page.tsx`](app/estudos/simulado-personalizado/page.tsx:1)
*   `/financas`: [`app/financas/page.tsx`](app/financas/page.tsx:1)
*   `/hiperfocos`: [`app/hiperfocos/page.tsx`](app/hiperfocos/page.tsx:1)
*   `/lazer`: [`app/lazer/page.tsx`](app/lazer/page.tsx:1)
*   `/perfil`: [`app/perfil/page.tsx`](app/perfil/page.tsx:1)
*   `/perfil/ajuda`: [`app/perfil/ajuda/page.tsx`](app/perfil/ajuda/page.tsx:1)
*   `/receitas`: [`app/receitas/page.tsx`](app/receitas/page.tsx:1)
*   `/receitas/[id]`: [`app/receitas/[id]/page.tsx`](app/receitas/[id]/page.tsx:1)
*   `/receitas/adicionar`: [`app/receitas/adicionar/page.tsx`](app/receitas/adicionar/page.tsx:1)
*   `/receitas/editar/[id]`: [`app/receitas/editar/[id]/page.tsx`](app/receitas/editar/[id]/page.tsx:1)
*   `/receitas/lista-compras`: [`app/receitas/lista-compras/page.tsx`](app/receitas/lista-compras/page.tsx:1)
*   `/roadmap`: [`app/roadmap/page.tsx`](app/roadmap/page.tsx:1)
*   `/saude`: [`app/saude/page.tsx`](app/saude/page.tsx:1)
*   `/sono`: [`app/sono/page.tsx`](app/sono/page.tsx:1)
</file>

<file path="technical/04-ui-components.md">
# 4. Componentes de UI Reutiliz√°veis ([`app/components/ui/`](app/components/ui/))

Este documento descreve os componentes de UI reutiliz√°veis encontrados no diret√≥rio [`app/components/ui/`](app/components/ui/). Estes componentes s√£o a base para a constru√ß√£o da interface do usu√°rio da aplica√ß√£o Anatel2 (StayFocus), garantindo consist√™ncia visual e funcional.

*(Conte√∫do da Subtarefa 4: An√°lise dos Componentes de UI Reutiliz√°veis ([`app/components/ui/`](app/components/ui/)) ser√° inserido aqui.)*
</file>

<file path="technical/05-state-management.md">
# 5. Gerenciamento de Estado ([`app/stores/`](app/stores/))

Este documento detalha a estrat√©gia e as implementa√ß√µes de gerenciamento de estado utilizadas na aplica√ß√£o Anatel2 (StayFocus), localizadas principalmente no diret√≥rio [`app/stores/`](app/stores/).

*(Conte√∫do da Subtarefa 5: An√°lise do Gerenciamento de Estado ([`app/stores/`](app/stores/)) ser√° inserido aqui.)*
</file>

<file path="technical/06-libraries-services.md">
# 6. Bibliotecas e Servi√ßos ([`app/lib/`](app/lib/))

Este documento aborda as bibliotecas externas, utilit√°rios e servi√ßos implementados no diret√≥rio [`app/lib/`](app/lib/) que suportam as funcionalidades da aplica√ß√£o Anatel2 (StayFocus).

*(Conte√∫do da Subtarefa 6: An√°lise dos Utilit√°rios e Servi√ßos ([`app/lib/`](app/lib/)) ser√° inserido aqui.)*
</file>

<file path="technical/README.md">
# Documenta√ß√£o T√©cnica do Projeto StayFocus (Anatel2)

Esta documenta√ß√£o t√©cnica detalha a arquitetura, componentes e funcionalidades do projeto StayFocus (Anatel2). O objetivo √© fornecer um guia compreens√≠vel para desenvolvedores e partes interessadas sobre os aspectos t√©cnicos da aplica√ß√£o.

## √çndice

*   [Vis√£o Geral do Projeto](./01-project-overview.md)
*   [Roteamento](./02-routing.md)
*   [P√°ginas da Aplica√ß√£o](./03-pages/README.md)
*   [Componentes de UI Reutiliz√°veis](./04-ui-components.md)
*   [Gerenciamento de Estado](./05-state-management.md)
*   [Bibliotecas e Servi√ßos Auxiliares](./06-libraries-services.md)
</file>

<file path="exemplo-receita-unica.json">
{
  "nome": "Bolo de Cenoura Simples (Exemplo)",
  "descricao": "Um bolo de cenoura cl√°ssico, fofinho e f√°cil de fazer.",
  "categorias": ["sobremesa", "lanche"],
  "tags": ["F√°cil", "Cl√°ssico", "Doce"],
  "tempoPreparo": 45,
  "porcoes": 8,
  "calorias": "350 kcal por por√ß√£o (aprox.)",
  "imagem": "",
  "ingredientes": [
    { "nome": "Cenoura m√©dia ralada", "quantidade": 3, "unidade": "unidade" },
    { "nome": "Ovos", "quantidade": 3, "unidade": "unidade" },
    { "nome": "√ìleo vegetal", "quantidade": 200, "unidade": "ml" },
    { "nome": "A√ß√∫car", "quantidade": 250, "unidade": "g" },
    { "nome": "Farinha de trigo", "quantidade": 300, "unidade": "g" },
    { "nome": "Fermento em p√≥", "quantidade": 1, "unidade": "colher_sopa" }
  ],
  "passos": [
    "Pr√©-aque√ßa o forno a 180¬∞C e unte uma forma.",
    "No liquidificador, bata as cenouras, os ovos e o √≥leo at√© ficar homog√™neo.",
    "Despeje a mistura em uma tigela e adicione o a√ß√∫car e a farinha peneirada, misturando bem.",
    "Por √∫ltimo, incorpore delicadamente o fermento em p√≥.",
    "Despeje a massa na forma preparada e leve ao forno por cerca de 35-40 minutos, ou at√© que um palito inserido no centro saia limpo.",
    "Deixe esfriar antes de desenformar. Sirva com cobertura de chocolate, se desejar."
  ]
}
</file>

<file path="exemplo-receitas-multiplas.json">
[
  {
    "nome": "Panqueca Americana (Exemplo)",
    "descricao": "Panquecas fofinhas cl√°ssicas para o caf√© da manh√£.",
    "categorias": ["cafe_manha"],
    "tags": ["R√°pido", "F√°cil"],
    "tempoPreparo": 20,
    "porcoes": 4,
    "calorias": "250 kcal por por√ß√£o",
    "imagem": "",
    "ingredientes": [
      { "nome": "Farinha de trigo", "quantidade": 150, "unidade": "g" },
      { "nome": "A√ß√∫car", "quantidade": 1, "unidade": "colher_sopa" },
      { "nome": "Fermento em p√≥", "quantidade": 2, "unidade": "colher_cha" },
      { "nome": "Sal", "quantidade": 0.5, "unidade": "colher_cha" },
      { "nome": "Leite", "quantidade": 240, "unidade": "ml" },
      { "nome": "Ovo", "quantidade": 1, "unidade": "unidade" },
      { "nome": "Manteiga derretida", "quantidade": 2, "unidade": "colher_sopa" }
    ],
    "passos": [
      "Em uma tigela grande, misture a farinha, o a√ß√∫car, o fermento e o sal.",
      "Em outra tigela, misture o leite, o ovo e a manteiga derretida.",
      "Despeje os ingredientes l√≠quidos sobre os secos e misture apenas at√© incorporar (n√£o misture demais).",
      "Aque√ßa uma frigideira levemente untada em fogo m√©dio.",
      "Despeje cerca de 1/4 de x√≠cara de massa por panqueca na frigideira quente.",
      "Cozinhe por cerca de 2 minutos de cada lado, ou at√© dourar.",
      "Sirva quente com mel, frutas ou sua cobertura preferida."
    ]
  },
  {
    "nome": "Salada Caesar Simples (Exemplo)",
    "descricao": "Uma vers√£o r√°pida e f√°cil da cl√°ssica Salada Caesar.",
    "categorias": ["almoco", "jantar", "salada"],
    "tags": ["R√°pido", "Leve", "Cl√°ssico"],
    "tempoPreparo": 15,
    "porcoes": 2,
    "calorias": "400 kcal por por√ß√£o (com frango)",
    "imagem": "",
    "ingredientes": [
      { "nome": "Alface romana picada", "quantidade": 1, "unidade": "unidade" },
      { "nome": "Peito de frango grelhado em tiras", "quantidade": 200, "unidade": "g" },
      { "nome": "Croutons", "quantidade": 50, "unidade": "g" },
      { "nome": "Queijo parmes√£o ralado", "quantidade": 30, "unidade": "g" },
      { "nome": "Molho Caesar pronto", "quantidade": 4, "unidade": "colher_sopa" }
    ],
    "passos": [
      "Em uma saladeira grande, coloque a alface romana picada.",
      "Adicione o frango grelhado em tiras.",
      "Regue com o molho Caesar e misture bem para cobrir todas as folhas.",
      "Adicione os croutons e o queijo parmes√£o ralado.",
      "Misture levemente mais uma vez e sirva imediatamente."
    ]
  }
]
</file>

<file path="guia-receitas.md">
# Guia de Implementa√ß√£o: Se√ß√£o de Receitas na P√°gina /alimentacao

## 1. Estrutura de Pastas e Arquivos

Crie a seguinte estrutura sugerida:

```
/components
  - ListaReceitas.tsx
  - FiltroCategorias.tsx
  - Pesquisa.tsx
  - Button.tsx
  - Tag.tsx
  - Input.tsx
  - Textarea.tsx
  - Select.tsx
  - TagInput.tsx
  - Checkbox.tsx
/pages ou /app
  /receitas
    - index.tsx (ou page.tsx)
    - [id].tsx (ou [id]/page.tsx)
    - adicionar.tsx (ou adicionar/page.tsx)
    - lista-compras.tsx (ou lista-compras/page.tsx)
/stores
  - receitasStore.ts
  - alimentacaoStore.ts
```

## 2. Store de Receitas

Implemente o arquivo `stores/receitasStore.ts` conforme o exemplo do documento de proposta. Isso garante o gerenciamento de receitas, favoritos e integra√ß√£o com o localStorage.

## 3. Componentes de UI

Implemente os componentes principais:
- `ReceitasPage` (listagem e filtro)
- `DetalhesReceita` (visualiza√ß√£o detalhada)
- `AdicionarReceita` (formul√°rio de cria√ß√£o/edi√ß√£o)
- `ListaCompras` (lista de compras baseada nas receitas)

Voc√™ pode copiar e colar os exemplos do documento de proposta, adaptando para o seu padr√£o de projeto (Next.js App Router ou Pages Router).

## 4. Integra√ß√£o com Alimenta√ß√£o

No arquivo da p√°gina `/alimentacao`, adicione um link ou bot√£o para acessar a se√ß√£o de receitas. Exemplo:

```tsx
// Em /pages/alimentacao/index.tsx ou /app/alimentacao/page.tsx
import Link from 'next/link';

export default function AlimentacaoPage() {
  return (
    <div>
      <h1>Alimenta√ß√£o</h1>
      {/* ...outros conte√∫dos... */}
      <Link href="/receitas">
        <button className="bg-primary-500 text-white px-4 py-2 rounded">
          Ir para Receitas
        </button>
      </Link>
    </div>
  );
}
```

## 5. Rotas

Garanta que as rotas estejam configuradas conforme o seu Next.js (App Router ou Pages Router). Isso permite acessar `/receitas`, `/receitas/adicionar`, `/receitas/[id]` e `/receitas/lista-compras`.

## 6. Sidebar/Navega√ß√£o

Adicione o link para receitas no seu Sidebar, conforme sugerido:

```tsx
<Link href="/receitas">
  <Book /> Receitas
</Link>
```

## 7. Testes e Ajustes

- Teste a adi√ß√£o, edi√ß√£o, remo√ß√£o e visualiza√ß√£o de receitas.
- Teste a integra√ß√£o com o planejador de refei√ß√µes.
- Teste a lista de compras.
- Ajuste responsividade e UX conforme necess√°rio.

---

## D√∫vidas Frequentes

- **Precisa de backend?** N√£o obrigatoriamente, pois o Zustand com persist√™ncia j√° salva no localStorage. Mas para multiusu√°rios ou backup, um backend seria ideal.
- **Como tratar imagens?** O exemplo usa `URL.createObjectURL`, mas para produ√ß√£o, use um servi√ßo de upload (Cloudinary, S3, etc).
- **Como integrar com outras √°reas?** Use os IDs das receitas para relacionar com refei√ß√µes planejadas, finan√ßas, etc.

---
</file>

<file path="receita-plan.md">
## Proposta para uma Se√ß√£o de Receitas dentro da Pagina Alimenta√ß√£o (`/receitas`)

### Funcionalidades Principais:

1. **Cat√°logo de Receitas**
   - Visualiza√ß√£o em grid/lista de receitas salvas
   - Filtragem por categorias (caf√© da manh√£, almo√ßo, jantar, lanches, etc.)
   - Pesquisa por ingredientes ou nome

2. **Detalhes da Receita**
   - Ingredientes com quantidades
   - Instru√ß√µes passo a passo
   - Tempo de preparo e por√ß√µes
   - Informa√ß√µes nutricionais
   - Tags para categoriza√ß√£o (sem gl√∫ten, vegano, etc.)

3. **Adi√ß√£o/Edi√ß√£o de Receitas**
   - Formul√°rio para adicionar novas receitas
   - Upload de imagens
   - Editor para formata√ß√£o do texto

4. **Integra√ß√£o com Alimenta√ß√£o**
   - Adicionar receita ao planejador de refei√ß√µes
   - Registrar refei√ß√£o baseada em receita

5. **Funcionalidades Extra**
   - Lista de compras baseada em receitas selecionadas
   - Ajuste autom√°tico de quantidades baseado no n√∫mero de por√ß√µes
   - Favoritar receitas

Possivel estrutura de c√≥digo e componentes para essa se√ß√£o:

### Componentes Chave:

#### `ReceitasPage.tsx` (P√°gina principal)
```tsx
import { useState } from 'react';
import { ListaReceitas } from './ListaReceitas';
import { FiltroCategorias } from './FiltroCategorias';
import { Pesquisa } from '../components/Pesquisa';
import { useReceitasStore } from '../stores/receitasStore';

export default function ReceitasPage() {
  const { receitas } = useReceitasStore();
  const [filtroCategoria, setFiltroCategoria] = useState('todas');
  const [termoPesquisa, setTermoPesquisa] = useState('');
  
  const receitasFiltradas = receitas
    .filter(receita => filtroCategoria === 'todas' || receita.categorias.includes(filtroCategoria))
    .filter(receita => 
      receita.nome.toLowerCase().includes(termoPesquisa.toLowerCase()) ||
      receita.ingredientes.some(ing => ing.nome.toLowerCase().includes(termoPesquisa.toLowerCase()))
    );

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-6">Minhas Receitas</h1>
      
      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <Pesquisa 
          placeholder="Buscar por nome ou ingrediente" 
          valor={termoPesquisa} 
          aoMudar={setTermoPesquisa} 
        />
        <FiltroCategorias 
          categoriaAtual={filtroCategoria} 
          aoSelecionar={setFiltroCategoria} 
        />
      </div>
      
      <ListaReceitas receitas={receitasFiltradas} />
    </div>
  );
}
```

#### `DetalhesReceita.tsx` (Visualiza√ß√£o detalhada)
```tsx
import { useState } from 'react';
import { useReceitasStore } from '../stores/receitasStore';
import { useAlimentacaoStore } from '../stores/alimentacaoStore';
import { Button } from '../components/Button';
import { Tag } from '../components/Tag';

export function DetalhesReceita({ id }) {
  const { obterReceitaPorId } = useReceitasStore();
  const { adicionarAoPlanejador } = useAlimentacaoStore();
  const [porcoes, setPorcoes] = useState(1);
  
  const receita = obterReceitaPorId(id);
  
  if (!receita) return <p>Receita n√£o encontrada</p>;
  
  const ajustarQuantidade = (quantidade) => {
    return (quantidade * porcoes / receita.porcoes).toFixed(1);
  };
  
  const adicionarAoPlanejamento = () => {
    adicionarAoPlanejador({
      descricao: receita.nome,
      horario: "",
      receitaId: receita.id
    });
  };
  
  return (
    <div className="p-4 max-w-4xl mx-auto">
      <div className="relative h-64 rounded-lg overflow-hidden mb-6">
        {receita.imagem ? (
          <img 
            src={receita.imagem} 
            alt={receita.nome} 
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gray-200 flex items-center justify-center">
            <span>Sem imagem</span>
          </div>
        )}
      </div>
      
      <h1 className="text-3xl font-bold mb-2">{receita.nome}</h1>
      
      <div className="flex flex-wrap gap-2 mb-6">
        {receita.tags.map(tag => (
          <Tag key={tag}>{tag}</Tag>
        ))}
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-primary-50 p-3 rounded-lg text-center">
          <p className="text-sm">Tempo de Preparo</p>
          <p className="font-bold">{receita.tempoPreparo} min</p>
        </div>
        <div className="bg-primary-50 p-3 rounded-lg text-center">
          <p className="text-sm">Por√ß√µes</p>
          <div className="flex items-center justify-center gap-2">
            <button onClick={() => setPorcoes(Math.max(1, porcoes - 1))}>-</button>
            <p className="font-bold">{porcoes}</p>
            <button onClick={() => setPorcoes(porcoes + 1)}>+</button>
          </div>
        </div>
        <div className="bg-primary-50 p-3 rounded-lg text-center">
          <p className="text-sm">Calorias (por por√ß√£o)</p>
          <p className="font-bold">{receita.calorias || "N√£o informado"}</p>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="md:col-span-1">
          <h2 className="text-xl font-bold mb-4">Ingredientes</h2>
          <ul className="space-y-2">
            {receita.ingredientes.map((ing, index) => (
              <li key={index} className="flex items-start gap-2">
                <span className="font-medium">{ajustarQuantidade(ing.quantidade)} {ing.unidade}</span>
                <span>{ing.nome}</span>
              </li>
            ))}
          </ul>
          
          <div className="mt-6">
            <Button onClick={adicionarAoPlanejamento} color="primary">
              Adicionar ao Planejador
            </Button>
          </div>
        </div>
        
        <div className="md:col-span-2">
          <h2 className="text-xl font-bold mb-4">Modo de Preparo</h2>
          <ol className="space-y-4 list-decimal pl-4">
            {receita.passos.map((passo, index) => (
              <li key={index} className="pl-2">
                {passo}
              </li>
            ))}
          </ol>
        </div>
      </div>
    </div>
  );
}
```

#### `AdicionarReceita.tsx` (Formul√°rio de adi√ß√£o/edi√ß√£o)
```tsx
import { useState } from 'react';
import { useReceitasStore } from '../stores/receitasStore';
import { Button } from '../components/Button';
import { Input } from '../components/Input';
import { Textarea } from '../components/Textarea';
import { Select } from '../components/Select';
import { TagInput } from '../components/TagInput';

export function AdicionarReceita({ receitaParaEditar, aoFinalizar }) {
  const { adicionarReceita, atualizarReceita } = useReceitasStore();
  const editando = !!receitaParaEditar;
  
  const [receita, setReceita] = useState({
    id: receitaParaEditar?.id || Date.now().toString(),
    nome: receitaParaEditar?.nome || '',
    descricao: receitaParaEditar?.descricao || '',
    categorias: receitaParaEditar?.categorias || [],
    tags: receitaParaEditar?.tags || [],
    tempoPreparo: receitaParaEditar?.tempoPreparo || 30,
    porcoes: receitaParaEditar?.porcoes || 2,
    calorias: receitaParaEditar?.calorias || '',
    imagem: receitaParaEditar?.imagem || '',
    ingredientes: receitaParaEditar?.ingredientes || [{ nome: '', quantidade: 1, unidade: 'g' }],
    passos: receitaParaEditar?.passos || ['']
  });
  
  const opcoesUnidades = [
    { value: 'g', label: 'gramas (g)' },
    { value: 'ml', label: 'mililitros (ml)' },
    { value: 'unidade', label: 'unidade(s)' },
    { value: 'colher_sopa', label: 'colher(es) de sopa' },
    { value: 'colher_cha', label: 'colher(es) de ch√°' },
    { value: 'xicara', label: 'x√≠cara(s)' },
    { value: 'a_gosto', label: 'a gosto' },
  ];
  
  const categorias = [
    { value: 'cafe_manha', label: 'Caf√© da Manh√£' },
    { value: 'almoco', label: 'Almo√ßo' },
    { value: 'jantar', label: 'Jantar' },
    { value: 'lanche', label: 'Lanche' },
    { value: 'sobremesa', label: 'Sobremesa' },
    { value: 'bebida', label: 'Bebida' }
  ];
  
  const atualizarCampo = (campo, valor) => {
    setReceita({ ...receita, [campo]: valor });
  };
  
  const atualizarIngrediente = (index, campo, valor) => {
    const novosIngredientes = [...receita.ingredientes];
    novosIngredientes[index] = { ...novosIngredientes[index], [campo]: valor };
    setReceita({ ...receita, ingredientes: novosIngredientes });
  };
  
  const adicionarIngrediente = () => {
    setReceita({
      ...receita,
      ingredientes: [...receita.ingredientes, { nome: '', quantidade: 1, unidade: 'g' }]
    });
  };
  
  const removerIngrediente = (index) => {
    const novosIngredientes = [...receita.ingredientes];
    novosIngredientes.splice(index, 1);
    setReceita({ ...receita, ingredientes: novosIngredientes });
  };
  
  const atualizarPasso = (index, valor) => {
    const novosPassos = [...receita.passos];
    novosPassos[index] = valor;
    setReceita({ ...receita, passos: novosPassos });
  };
  
  const adicionarPasso = () => {
    setReceita({
      ...receita,
      passos: [...receita.passos, '']
    });
  };
  
  const removerPasso = (index) => {
    const novosPassos = [...receita.passos];
    novosPassos.splice(index, 1);
    setReceita({ ...receita, passos: novosPassos });
  };
  
  const salvarReceita = () => {
    // Valida√ß√£o b√°sica
    if (!receita.nome || receita.ingredientes.some(ing => !ing.nome) || receita.passos.some(p => !p)) {
      alert('Por favor, preencha todos os campos obrigat√≥rios.');
      return;
    }
    
    if (editando) {
      atualizarReceita(receita);
    } else {
      adicionarReceita(receita);
    }
    
    aoFinalizar && aoFinalizar(receita);
  };
  
  return (
    <div className="p-4 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">
        {editando ? 'Editar Receita' : 'Nova Receita'}
      </h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <label className="block mb-2 font-medium">Nome da Receita*</label>
          <Input
            value={receita.nome}
            onChange={(e) => atualizarCampo('nome', e.target.value)}
            placeholder="Ex: Panquecas de Banana"
            required
          />
        </div>
        
        <div>
          <label className="block mb-2 font-medium">Categorias</label>
          <Select
            options={categorias}
            value={receita.categorias}
            onChange={(value) => atualizarCampo('categorias', value)}
            multiple
          />
        </div>
      </div>
      
      <div className="mb-6">
        <label className="block mb-2 font-medium">Descri√ß√£o Breve</label>
        <Textarea
          value={receita.descricao}
          onChange={(e) => atualizarCampo('descricao', e.target.value)}
          placeholder="Uma breve descri√ß√£o sobre a receita..."
          rows={2}
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div>
          <label className="block mb-2 font-medium">Tempo de Preparo (min)*</label>
          <Input
            type="number"
            value={receita.tempoPreparo}
            onChange={(e) => atualizarCampo('tempoPreparo', parseInt(e.target.value))}
            min={1}
          />
        </div>
        
        <div>
          <label className="block mb-2 font-medium">Por√ß√µes*</label>
          <Input
            type="number"
            value={receita.porcoes}
            onChange={(e) => atualizarCampo('porcoes', parseInt(e.target.value))}
            min={1}
          />
        </div>
        
        <div>
          <label className="block mb-2 font-medium">Calorias (por por√ß√£o)</label>
          <Input
            type="number"
            value={receita.calorias}
            onChange={(e) => atualizarCampo('calorias', e.target.value)}
            min={0}
            placeholder="Opcional"
          />
        </div>
      </div>
      
      <div className="mb-6">
        <label className="block mb-2 font-medium">Tags</label>
        <TagInput
          tags={receita.tags}
          onChange={(tags) => atualizarCampo('tags', tags)}
          suggestions={['Sem Gl√∫ten', 'Vegano', 'Vegetariano', 'Low Carb', 'R√°pido', 'Saud√°vel']}
        />
      </div>
      
      <div className="mb-6">
        <label className="block mb-2 font-medium">Imagem</label>
        <Input
          type="file"
          accept="image/*"
          onChange={(e) => {
            // Aqui voc√™ implementaria o upload da imagem
            // Por simplicidade, simulamos um URL da imagem
            if (e.target.files?.[0]) {
              const fileURL = URL.createObjectURL(e.target.files[0]);
              atualizarCampo('imagem', fileURL);
            }
          }}
        />
        {receita.imagem && (
          <div className="mt-2 relative h-40 w-40">
            <img 
              src={receita.imagem} 
              alt="Preview" 
              className="w-full h-full object-cover rounded"
            />
          </div>
        )}
      </div>
      
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-xl font-bold">Ingredientes*</h2>
          <Button onClick={adicionarIngrediente} size="sm">+ Adicionar</Button>
        </div>
        
        {receita.ingredientes.map((ingrediente, index) => (
          <div key={index} className="flex items-center gap-3 mb-2">
            <Input
              type="number"
              value={ingrediente.quantidade}
              onChange={(e) => atualizarIngrediente(index, 'quantidade', parseFloat(e.target.value))}
              min={0}
              step={0.1}
              className="w-24"
            />
            
            <Select
              options={opcoesUnidades}
              value={ingrediente.unidade}
              onChange={(value) => atualizarIngrediente(index, 'unidade', value)}
              className="w-40"
            />
            
            <Input
              value={ingrediente.nome}
              onChange={(e) => atualizarIngrediente(index, 'nome', e.target.value)}
              placeholder="Ingrediente"
              className="flex-1"
            />
            
            <Button 
              onClick={() => removerIngrediente(index)} 
              variant="ghost" 
              size="sm"
              disabled={receita.ingredientes.length <= 1}
            >
              X
            </Button>
          </div>
        ))}
      </div>
      
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-xl font-bold">Modo de Preparo*</h2>
          <Button onClick={adicionarPasso} size="sm">+ Adicionar</Button>
        </div>
        
        {receita.passos.map((passo, index) => (
          <div key={index} className="flex items-start gap-3 mb-4">
            <div className="mt-2 font-medium">{index + 1}.</div>
            <Textarea
              value={passo}
              onChange={(e) => atualizarPasso(index, e.target.value)}
              placeholder={`Passo ${index + 1}`}
              className="flex-1"
              rows={2}
            />
            
            <Button 
              onClick={() => removerPasso(index)} 
              variant="ghost" 
              size="sm"
              disabled={receita.passos.length <= 1}
            >
              X
            </Button>
          </div>
        ))}
      </div>
      
      <div className="flex justify-end gap-4">
        <Button onClick={() => aoFinalizar?.()} variant="outline">Cancelar</Button>
        <Button onClick={salvarReceita} color="primary">Salvar Receita</Button>
      </div>
    </div>
  );
}
```

### Store para Gerenciamento de Estado

Vamos criar uma store Zustand para armazenar e gerenciar as receitas:

```tsx
// stores/receitasStore.ts
import create from 'zustand';
import { persist } from 'zustand/middleware';

interface Ingrediente {
  nome: string;
  quantidade: number;
  unidade: string;
}

interface Receita {
  id: string;
  nome: string;
  descricao: string;
  categorias: string[];
  tags: string[];
  tempoPreparo: number;
  porcoes: number;
  calorias: string;
  imagem: string;
  ingredientes: Ingrediente[];
  passos: string[];
}

interface ReceitasStore {
  receitas: Receita[];
  adicionarReceita: (receita: Receita) => void;
  atualizarReceita: (receita: Receita) => void;
  removerReceita: (id: string) => void;
  obterReceitaPorId: (id: string) => Receita | undefined;
  favoritos: string[];
  alternarFavorito: (id: string) => void;
}

export const useReceitasStore = create<ReceitasStore>()(
  persist(
    (set, get) => ({
      receitas: [],
      adicionarReceita: (receita) => 
        set((state) => ({ receitas: [...state.receitas, receita] })),
      atualizarReceita: (receita) =>
        set((state) => ({
          receitas: state.receitas.map((r) => 
            r.id === receita.id ? receita : r
          ),
        })),
      removerReceita: (id) =>
        set((state) => ({
          receitas: state.receitas.filter((r) => r.id !== id),
        })),
      obterReceitaPorId: (id) => {
        return get().receitas.find((r) => r.id === id);
      },
      favoritos: [],
      alternarFavorito: (id) => 
        set((state) => {
          if (state.favoritos.includes(id)) {
            return { favoritos: state.favoritos.filter((fav) => fav !== id) };
          } else {
            return { favoritos: [...state.favoritos, id] };
          }
        }),
    }),
    {
      name: 'receitas-storage',
    }
  )
);
```

### Integra√ß√£o com a Alimenta√ß√£o

Para integrar a funcionalidade de receitas com a se√ß√£o de alimenta√ß√£o existente, podemos modificar o `PlanejadorRefeicoes.tsx` para suportar a adi√ß√£o de receitas:

```tsx
// Modifica√ß√£o para o PlanejadorRefeicoes.tsx
import { useState, useEffect } from 'react';
import { useAlimentacaoStore } from '../stores/alimentacaoStore';
import { useReceitasStore } from '../stores/receitasStore';

export function PlanejadorRefeicoes() {
  const { refeicoesPlanejadas, adicionarRefeicao } = useAlimentacaoStore();
  const { receitas } = useReceitasStore();
  const [novaRefeicao, setNovaRefeicao] = useState({
    horario: "",
    descricao: "",
    receitaId: ""
  });
  
  const handleAdicionarRefeicao = () => {
    adicionarRefeicao(
      novaRefeicao.horario, 
      novaRefeicao.descricao, 
      novaRefeicao.receitaId
    );
    
    // Resetar o formul√°rio
    setNovaRefeicao({
      horario: "",
      descricao: "",
      receitaId: ""
    });
  };
  
  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Planejador de Refei√ß√µes</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div>
          <label className="block mb-1">Hor√°rio</label>
          <input
            type="time"
            value={novaRefeicao.horario}
            onChange={(e) => setNovaRefeicao({...novaRefeicao, horario: e.target.value})}
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div>
          <label className="block mb-1">Descri√ß√£o</label>
          <input
            type="text"
            value={novaRefeicao.descricao}
            onChange={(e) => setNovaRefeicao({...novaRefeicao, descricao: e.target.value})}
            placeholder="Ex: Caf√© da manh√£"
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div>
          <label className="block mb-1">Receita (opcional)</label>
          <select
            value={novaRefeicao.receitaId}
            onChange={(e) => setNovaRefeicao({...novaRefeicao, receitaId: e.target.value})}
            className="w-full p-2 border rounded"
          >
            <option value="">Selecione uma receita</option>
            {receitas.map((receita) => (
              <option key={receita.id} value={receita.id}>
                {receita.nome}
              </option>
            ))}
          </select>
        </div>
      </div>
      
      <button
        onClick={handleAdicionarRefeicao}
        disabled={!novaRefeicao.horario || !novaRefeicao.descricao}
        className="bg-primary-500 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        Adicionar Refei√ß√£o
      </button>
      
      <div className="mt-6">
        <h3 className="font-medium mb-2">Refei√ß√µes Planejadas</h3>
        {refeicoesPlanejadas.length === 0 ? (
          <p className="text-gray-500">Nenhuma refei√ß√£o planejada</p>
        ) : (
          <ul className="space-y-2">
            {refeicoesPlanejadas.map((refeicao, index) => {
              const receitaAssociada = refeicao.receitaId 
                ? receitas.find(r => r.id === refeicao.receitaId) 
                : null;
                
              return (
                <li key={index} className="p-3 bg-gray-50 rounded">
                  <div className="font-medium">{refeicao.horario} - {refeicao.descricao}</div>
                  {receitaAssociada && (
                    <div className="text-sm text-primary-600 mt-1">
                      Receita: {receitaAssociada.nome}
                    </div>
                  )}
                </li>
              );
            })}
          </ul>
        )}
      </div>
    </div>
  );
}
```

### Componente de Lista de Compras (Funcionalidade Extra)

```tsx
import { useState } from 'react';
import { useReceitasStore } from '../stores/receitasStore';
import { Checkbox } from '../components/Checkbox';
import { Button } from '../components/Button';

export function ListaCompras() {
  const { receitas } = useReceitasStore();
  const [receitasSelecionadas, setReceitasSelecionadas] = useState<string[]>([]);
  const [porcoes, setPorcoes] = useState<Record<string, number>>({});
  const [itensComprados, setItensComprados] = useState<string[]>([]);
  
  // Inicializar porc√µes ao selecionar uma receita
  const toggleReceitaSelecionada = (id: string) => {
    if (receitasSelecionadas.includes(id)) {
      setReceitasSelecionadas(receitasSelecionadas.filter(rid => rid !== id));
      
      // Remover do objeto de por√ß√µes
      const novasPorcoes = { ...porcoes };
      delete novasPorcoes[id];
      setPorcoes(novasPorcoes);
    } else {
      setReceitasSelecionadas([...receitasSelecionadas, id]);
      
      // Inicializar com o n√∫mero de por√ß√µes da receita
      const receita = receitas.find(r => r.id === id);
      if (receita) {
        setPorcoes({
          ...porcoes,
          [id]: receita.porcoes
        });
      }
    }
  };
  
  const atualizarPorcoes = (id: string, valor: number) => {
    setPorcoes({
      ...porcoes,
      [id]: Math.max(1, valor)
    });
  };
  
  // Agrupar ingredientes similares e calcular quantidades
  const gerarListaCompras = () => {
    const ingredientesAgrupados: Record<string, { 
      nome: string, 
      quantidadeTotal: number, 
      unidade: string 
    }> = {};
    
    // Para cada receita selecionada
    receitasSelecionadas.forEach(id => {
      const receita = receitas.find(r => r.id === id);
      if (!receita) return;
      
      const fatorMultiplicacao = porcoes[id] / receita.porcoes;
      
      // Para cada ingrediente na receita
      receita.ingredientes.forEach(ing => {
        // Criar uma chave √∫nica para o ingrediente (nome + unidade)
        const chave = `${ing.nome}_${ing.unidade}`;
        
        if (ingredientesAgrupados[chave]) {
          // Se j√° existe, adicionar √† quantidade
          ingredientesAgrupados[chave].quantidadeTotal += ing.quantidade * fatorMultiplicacao;
        } else {
          // Se n√£o existe, criar nova entrada
          ingredientesAgrupados[chave] = {
            nome: ing.nome,
            quantidadeTotal: ing.quantidade * fatorMultiplicacao,
            unidade: ing.unidade
          };
        }
      });
    });
    
    // Converter para array e ordenar
    return Object.values(ingredientesAgrupados)
      .sort((a, b) => a.nome.localeCompare(b.nome));
  };
  
  const listaCompras = gerarListaCompras();
  
  const toggleItemComprado = (item: string) => {
    if (itensComprados.includes(item)) {
      setItensComprados(itensComprados.filter(i => i !== item));
    } else {
      setItensComprados([...itensComprados, item]);
    }
  };
  
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-6">Lista de Compras</h1>
      
      <div className="mb-8">
        <h2 className="text-xl font-bold mb-4">Selecione as Receitas</h2>
        
        {receitas.length === 0 ? (
          <p
Vou continuar com o desenvolvimento do componente de Lista de Compras e finalizar a proposta para a se√ß√£o de receitas.

```tsx
// Continua√ß√£o do ListaCompras.tsx
        {receitas.length === 0 ? (
          <p className="text-gray-500">
            Nenhuma receita cadastrada. Adicione receitas para criar uma lista de compras.
          </p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {receitas.map(receita => (
              <div 
                key={receita.id} 
                className={`p-3 border rounded cursor-pointer transition-colors ${
                  receitasSelecionadas.includes(receita.id) 
                    ? 'border-primary-500 bg-primary-50' 
                    : 'border-gray-200'
                }`}
                onClick={() => toggleReceitaSelecionada(receita.id)}
              >
                <div className="flex items-start gap-3">
                  <Checkbox 
                    checked={receitasSelecionadas.includes(receita.id)}
                    onChange={() => {}} // Gerenciado pelo click no container
                  />
                  <div>
                    <p className="font-medium">{receita.nome}</p>
                    {receitasSelecionadas.includes(receita.id) && (
                      <div className="mt-2 flex items-center gap-2">
                        <span className="text-sm">Por√ß√µes:</span>
                        <button 
                          className="w-6 h-6 bg-gray-200 rounded"
                          onClick={(e) => {
                            e.stopPropagation();
                            atualizarPorcoes(receita.id, (porcoes[receita.id] || 1) - 1);
                          }}
                        >
                          -
                        </button>
                        <span>{porcoes[receita.id] || receita.porcoes}</span>
                        <button 
                          className="w-6 h-6 bg-gray-200 rounded"
                          onClick={(e) => {
                            e.stopPropagation();
                            atualizarPorcoes(receita.id, (porcoes[receita.id] || 1) + 1);
                          }}
                        >
                          +
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {receitasSelecionadas.length > 0 && (
        <div>
          <h2 className="text-xl font-bold mb-4">Lista de Compras</h2>
          
          {listaCompras.length === 0 ? (
            <p className="text-gray-500">
              Nenhum ingrediente encontrado nas receitas selecionadas.
            </p>
          ) : (
            <>
              <div className="mb-4 flex gap-2">
                <Button 
                  onClick={() => setItensComprados([])} 
                  variant="outline"
                >
                  Desmarcar Todos
                </Button>
                <Button 
                  onClick={() => setItensComprados(listaCompras.map(i => `${i.nome}_${i.unidade}`))} 
                  variant="outline"
                >
                  Marcar Todos
                </Button>
              </div>
              
              <ul className="space-y-2 mb-6">
                {listaCompras.map((item, index) => {
                  const itemKey = `${item.nome}_${item.unidade}`;
                  const isComprado = itensComprados.includes(itemKey);
                  
                  return (
                    <li 
                      key={index} 
                      className={`p-3 border rounded flex items-center gap-3 ${
                        isComprado ? 'bg-gray-100' : 'bg-white'
                      }`}
                    >
                      <Checkbox 
                        checked={isComprado}
                        onChange={() => toggleItemComprado(itemKey)}
                      />
                      <span className={isComprado ? 'line-through text-gray-500' : ''}>
                        <span className="font-medium">
                          {item.quantidadeTotal.toFixed(1)} {item.unidade}
                        </span>
                        {' '}{item.nome}
                      </span>
                    </li>
                  );
                })}
              </ul>
              
              <Button color="primary">
                Compartilhar Lista
              </Button>
            </>
          )}
        </div>
      )}
    </div>
  );
}
```

### Navega√ß√£o e Rotas

Para completar a implementa√ß√£o, precisamos adicionar as rotas e links de navega√ß√£o:

#### Rotas no Next.js (pasta `app` ou `pages` dependendo da vers√£o do Next.js)

Se estiver usando o App Router (Next.js >= 13):

```tsx
// app/receitas/page.tsx
export default function ReceitasPage() {
  return <ReceitasPage />;
}

// app/receitas/[id]/page.tsx
export default function ReceitaDetalhesPage({ params }) {
  return <DetalhesReceita id={params.id} />;
}

// app/receitas/adicionar/page.tsx
export default function AdicionarReceitaPage() {
  return <AdicionarReceita />;
}

// app/receitas/lista-compras/page.tsx
export default function ListaComprasPage() {
  return <ListaCompras />;
}
```

Ou, se estiver usando o Pages Router (vers√µes anteriores do Next.js):

```tsx
// pages/receitas/index.tsx
export default function ReceitasPage() {
  return <ReceitasPage />;
}

// pages/receitas/[id].tsx
export default function ReceitaDetalhesPage({ id }) {
  return <DetalhesReceita id={id} />;
}

// pages/receitas/adicionar.tsx
export default function AdicionarReceitaPage() {
  return <AdicionarReceita />;
}

// pages/receitas/lista-compras.tsx
export default function ListaComprasPage() {
  return <ListaCompras />;
}
```

#### Atualiza√ß√£o do Sidebar para incluir a se√ß√£o de Receitas

```tsx
// Modifica√ß√£o no Sidebar.tsx
import { Utensils, Book, ShoppingCart } from 'lucide-react'; // Adicione os imports necess√°rios

// No componente Sidebar, adicione:
<Link href="/alimentacao">
  <Utensils /> Alimenta√ß√£o
</Link>
<Link href="/receitas">
  <Book /> Receitas
</Link>
```

## Considera√ß√µes de Implementa√ß√£o

### 1. Armazenamento de Dados
- Estou utilizando o Zustand com middleware `persist` para armazenar as receitas no localStorage.
- Para uma aplica√ß√£o mais robusta, considere implementar um backend com banco de dados.

### 2. Manipula√ß√£o de Imagens
- O upload de imagens no formul√°rio foi implementado de forma simplificada com URL.createObjectURL.
- Para uma implementa√ß√£o completa, considere:
  - Compress√£o de imagens no cliente
  - Upload para um servi√ßo de armazenamento (S3, Cloudinary, etc.)
  - Implementar cache e otimiza√ß√£o de imagens

### 3. Responsividade
- Os componentes foram projetados com classes responsivas (grid-cols-1 md:grid-cols-3, etc.)
- Teste o layout em diferentes tamanhos de telas para garantir boa experi√™ncia m√≥vel

### 4. Recursos Adicionais que Podem Ser Implementados
- **Sistema de avalia√ß√£o** - Permitir classificar receitas com estrelas
- **Coment√°rios** - Adicionar notas pessoais a cada receita
- **Calend√°rio de refei√ß√µes** - Visualiza√ß√£o em formato de calend√°rio para o planejamento
- **Importa√ß√£o/exporta√ß√£o** - Permitir importar receitas de outros sites ou exportar para formatos como PDF
- **Vers√µes de receitas** - Salvar varia√ß√µes de uma mesma receita
</file>

</files>
